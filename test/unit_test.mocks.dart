// Mocks generated by Mockito 5.4.4 from annotations
// in todos_app/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todos_app/objectbox.g.dart' as _i8;
import 'package:todos_app/src/todo/data/datasources/todo_database_helper.dart'
    as _i6;
import 'package:todos_app/src/todo/data/datasources/todo_local_datasource.dart'
    as _i9;
import 'package:todos_app/src/todo/domain/entities/todo_entity.dart' as _i2;
import 'package:todos_app/src/todo/domain/repositories/todo_repository.dart'
    as _i4;
import 'package:todos_app/src/todo/domain/usecases/add_todo_use_case.dart'
    as _i11;
import 'package:todos_app/src/todo/domain/usecases/delete_todo_use_case.dart'
    as _i13;
import 'package:todos_app/src/todo/domain/usecases/get_all_todos_use_case.dart'
    as _i10;
import 'package:todos_app/src/todo/domain/usecases/update_todo_use_case.dart'
    as _i12;
import 'package:todos_app/src/todo/presentation/cubit/todo_cubit.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoEntity_0 extends _i1.SmartFake implements _i2.TodoEntity {
  _FakeTodoEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoRepository_2 extends _i1.SmartFake
    implements _i4.TodoRepository {
  _FakeTodoRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoState_3 extends _i1.SmartFake implements _i5.TodoState {
  _FakeTodoState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoDatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDatabaseHelper extends _i1.Mock
    implements _i6.TodoDatabaseHelper {
  MockTodoDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i8.Store?> get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _i7.Future<_i8.Store?>.value(),
      ) as _i7.Future<_i8.Store?>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<List<_i2.TodoEntity>> getAllTodosLocal() => (super.noSuchMethod(
        Invocation.method(
          #getAllTodosLocal,
          [],
        ),
        returnValue: _i7.Future<List<_i2.TodoEntity>>.value(<_i2.TodoEntity>[]),
      ) as _i7.Future<List<_i2.TodoEntity>>);

  @override
  _i7.Future<_i2.TodoEntity> insertTodoLocal(_i2.TodoEntity? userItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTodoLocal,
          [userItem],
        ),
        returnValue: _i7.Future<_i2.TodoEntity>.value(_FakeTodoEntity_0(
          this,
          Invocation.method(
            #insertTodoLocal,
            [userItem],
          ),
        )),
      ) as _i7.Future<_i2.TodoEntity>);

  @override
  _i7.Future<bool> updateTodoLocal(_i2.TodoEntity? userItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodoLocal,
          [userItem],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> removeTodoLocal(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeTodoLocal,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [TodoLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalDataSource extends _i1.Mock
    implements _i9.TodoLocalDataSource {
  MockTodoLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i2.TodoEntity>> getTodos() => (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [],
        ),
        returnValue: _i7.Future<List<_i2.TodoEntity>>.value(<_i2.TodoEntity>[]),
      ) as _i7.Future<List<_i2.TodoEntity>>);

  @override
  _i7.Future<_i2.TodoEntity> addTodo(_i2.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i7.Future<_i2.TodoEntity>.value(_FakeTodoEntity_0(
          this,
          Invocation.method(
            #addTodo,
            [todo],
          ),
        )),
      ) as _i7.Future<_i2.TodoEntity>);

  @override
  _i7.Future<bool> updateTodo(_i2.TodoEntity? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i4.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.Either<Exception, _i2.TodoEntity>> addTodo(
          _i2.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, _i2.TodoEntity>>.value(
            _FakeEither_1<Exception, _i2.TodoEntity>(
          this,
          Invocation.method(
            #addTodo,
            [todo],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, _i2.TodoEntity>>);

  @override
  _i7.Future<_i3.Either<Exception, bool>> updateTodo(_i2.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, bool>>.value(
            _FakeEither_1<Exception, bool>(
          this,
          Invocation.method(
            #updateTodo,
            [todo],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, bool>>);

  @override
  _i7.Future<_i3.Either<Exception, bool>> deleteTodo(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, bool>>.value(
            _FakeEither_1<Exception, bool>(
          this,
          Invocation.method(
            #deleteTodo,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, bool>>);

  @override
  _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>> getAllTodos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodos,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>>.value(
                _FakeEither_1<Exception, List<_i2.TodoEntity>>(
          this,
          Invocation.method(
            #getAllTodos,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>>);
}

/// A class which mocks [GetAllTodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTodosUseCase extends _i1.Mock
    implements _i10.GetAllTodosUseCase {
  MockGetAllTodosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>>.value(
                _FakeEither_1<Exception, List<_i2.TodoEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, List<_i2.TodoEntity>>>);
}

/// A class which mocks [AddTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTodoUseCase extends _i1.Mock implements _i11.AddTodoUseCase {
  MockAddTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i7.Future<_i3.Either<Exception, _i2.TodoEntity>> call(
          _i2.TodoEntity? todoModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [todoModel],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, _i2.TodoEntity>>.value(
            _FakeEither_1<Exception, _i2.TodoEntity>(
          this,
          Invocation.method(
            #call,
            [todoModel],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, _i2.TodoEntity>>);
}

/// A class which mocks [UpdateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodoUseCase extends _i1.Mock implements _i12.UpdateTodoUseCase {
  MockUpdateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i7.Future<_i3.Either<Exception, bool>> call(_i2.TodoEntity? todoModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [todoModel],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, bool>>.value(
            _FakeEither_1<Exception, bool>(
          this,
          Invocation.method(
            #call,
            [todoModel],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, bool>>);
}

/// A class which mocks [DeleteTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodoUseCase extends _i1.Mock implements _i13.DeleteTodoUseCase {
  MockDeleteTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i7.Future<_i3.Either<Exception, bool>> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i7.Future<_i3.Either<Exception, bool>>.value(
            _FakeEither_1<Exception, bool>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.Either<Exception, bool>>);
}

/// A class which mocks [TodoCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoCubit extends _i1.Mock implements _i5.TodoCubit {
  MockTodoCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TodoState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTodoState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.TodoState);

  @override
  _i7.Stream<_i5.TodoState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i5.TodoState>.empty(),
      ) as _i7.Stream<_i5.TodoState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> fetchAllBlogs() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllBlogs,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addTodo(_i2.TodoEntity? todo) => (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateTodo(_i2.TodoEntity? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteTodo(_i2.TodoEntity? todo) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void emit(_i5.TodoState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i14.Change<_i5.TodoState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
